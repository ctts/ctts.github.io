(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{366:function(t,a,n){"use strict";n.r(a);var e=n(14),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"手把手教你实现一个移动端canvas签名模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#手把手教你实现一个移动端canvas签名模块"}},[t._v("#")]),t._v(" 手把手教你实现一个移动端canvas签名模块")]),t._v(" "),n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),n("blockquote",[n("p",[t._v("众所周知，canvas是html5中的难点，但是功能异常强大，我们可以用它来实现很多有意思的功能，比如说这个签名功能，只有靠canvas可以实现。正好靠这个功能来入门一下canvas，记住canvas的常用api")])]),t._v(" "),n("h2",{attrs:{id:"需求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#需求"}},[t._v("#")]),t._v(" 需求")]),t._v(" "),n("p",[t._v("移动端的手写签名功能，有上传按钮，清除按钮，使用canvas实现。")]),t._v(" "),n("h2",{attrs:{id:"学习canvas"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#学习canvas"}},[t._v("#")]),t._v(" 学习canvas")]),t._v(" "),n("p",[t._v("既然还对canvas一无所知，那么我们先来学习一下待会会用到的api，有追求的同学可以去"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("mdn上学习完善的api"),n("OutboundLink")],1)]),t._v(" "),n("h3",{attrs:{id:"htmlcanvaselement-getcontext-2d"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#htmlcanvaselement-getcontext-2d"}},[t._v("#")]),t._v(" HTMLCanvasElement.getContext('2d')")]),t._v(" "),n("p",[t._v("获取到canvas对象的"),n("strong",[t._v("渲染上下文对象")]),t._v("，因为签名是2d图片，所以使用 2d 来标识。是使用 canvas 的必要内容。")]),t._v(" "),n("h3",{attrs:{id:"cxt-beginpath"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-beginpath"}},[t._v("#")]),t._v(" cxt.beginPath()")]),t._v(" "),n("p",[t._v("新建一条路径，可以认为是开始绘制路径的标记。")]),t._v(" "),n("h3",{attrs:{id:"cxt-closepath"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-closepath"}},[t._v("#")]),t._v(" cxt.closePath()")]),t._v(" "),n("p",[t._v("结束一条路径，恢复最初的状态。")]),t._v(" "),n("h3",{attrs:{id:"cxt-moveto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-moveto"}},[t._v("#")]),t._v(" cxt.moveTo()")]),t._v(" "),n("p",[t._v("移动"),n("strong",[t._v("画笔位置")]),t._v("到指定的坐标(不绘制路径)。")]),t._v(" "),n("h3",{attrs:{id:"cxt-lineto"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-lineto"}},[t._v("#")]),t._v(" cxt.lineTo()")]),t._v(" "),n("p",[t._v("开始绘制，从"),n("strong",[t._v("画笔位置")]),t._v("绘制路径到指定坐标上。")]),t._v(" "),n("h3",{attrs:{id:"cxt-stroke"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-stroke"}},[t._v("#")]),t._v(" cxt.stroke()")]),t._v(" "),n("p",[t._v("填充路径。")]),t._v(" "),n("h3",{attrs:{id:"cxt-linewidth"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-linewidth"}},[t._v("#")]),t._v(" cxt.lineWidth()")]),t._v(" "),n("p",[t._v("线条宽度。")]),t._v(" "),n("h3",{attrs:{id:"cxt-fillstyle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#cxt-fillstyle"}},[t._v("#")]),t._v(" cxt.fillStyle()")]),t._v(" "),n("p",[t._v("设置画笔颜色。")]),t._v(" "),n("h3",{attrs:{id:"htmlcanvaselement-todataurl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#htmlcanvaselement-todataurl"}},[t._v("#")]),t._v(" HTMLCanvasElement.toDataURL()")]),t._v(" "),n("p",[t._v("将图片转化为base64格式输出。默认为png。")]),t._v(" "),n("h2",{attrs:{id:"签名实现逻辑"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#签名实现逻辑"}},[t._v("#")]),t._v(" 签名实现逻辑")]),t._v(" "),n("p",[t._v("使用移动端的touch事件来监听用户的滑动事件， "),n("code",[t._v("touchstart")]),t._v(" "),n("code",[t._v("touchmove")]),t._v(" "),n("code",[t._v("touchend")]),t._v(" 分别对应开始滑动，滑动中和滑动结束。")]),t._v(" "),n("ol",[n("li",[t._v("开始滑动时，将画笔移动到手指位置。")]),t._v(" "),n("li",[t._v("滑动中，不断填充滑动位置。")]),t._v(" "),n("li",[t._v("滑动结束，关闭一条路径，让画笔恢复。")])]),t._v(" "),n("p",[t._v("那么已经很明确了，只需要在每个touch事件中触发相应的事件即可。")]),t._v(" "),n("p",[t._v("看代码(vue)。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <canvas\n      @touchstart='touch_start'\n      @touchend='touch_end'\n      @touchmove='touch_move'\n      ref='canvas'\n      width=\"300\"\n      height=\"400\"\n    ></canvas>\n  </div>\n</template>\n")])])]),n("p",[t._v("在模板中放置了一个canvas，并注册监听了他们的touch事件，分别对应三个事件，并设置canvas宽高，设置ref方便在下文中获取canvas的DOM对象。")]),t._v(" "),n("p",[t._v("通过ref获取到canvas")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("data () {\n    return {\n      cxt: this.$refs.canvas.getContext('2d') // 用来存放canvas的dom\n    }\n  },\n")])])]),n("p",[t._v("设置粗细，和颜色")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("mounted () {\n// 设置颜色（黑色）\nthis.cxt.fillStyle = 'rgb(0,0,0)'\n// 设置粗细（2px）\nthis.cxt.lineWidth = '2px'\n},\n")])])]),n("p",[t._v("开始滑动时，将画笔移动到手指位置。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("touch_start (event) {\n  this.cxt.beginPath()\n  // 获取到触摸位置的X Y轴\n  let touch = event.changedTouches[0]\n  this.cxt.moveTo(touch.clientX, touch.clientY)\n},\n")])])]),n("p",[t._v("滑动中，不断填充滑动位置。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("touch_move (event) {\n  let touch = event.changedTouches[0]\n  this.cxt.lineTo(touch.clientX, touch.clientY)\n  // 使用lineTo后必须填充\n  this.cxt.stroke()\n},\n")])])]),n("p",[t._v("滑动结束，关闭一条路径，让画笔恢复。")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("touch_end () {\n  // 关闭这条路径\n  this.cxt.closePath()\n}\n")])])]),n("p",[t._v("这样应该就能完成了吧，运行一下尝试一下。\n"),n("img",{attrs:{src:"https://i.imgur.com/smI4FL0.png",alt:""}})]),t._v(" "),n("p",[t._v("……犯了个Vue新手常犯的错误，默认值一般是在 created 生命周期中就开始赋值了。但是 created 中还没有生成dom，所以必须要在 mounted 中才能获取dom。")]),t._v(" "),n("p",[t._v("修改代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("data () {\n  return {\n    cxt: {} // 用来存放canvas的渲染上下文对象\n  }\n},\nmounted () {\n  // 获取canvas的渲染上下文对象\n  this.cxt = this.$refs.canvas.getContext('2d')\n  // 设置颜色（黑色）\n  this.cxt.fillStyle = 'rgb(0,0,0)'\n  // 设置粗细（2px）\n  this.cxt.lineWidth = '2px'\n},\n")])])]),n("p",[t._v("这样一个基本的签名就完成了")]),t._v(" "),n("p",[n("img",{attrs:{src:"https://i.imgur.com/y9coVnq.gif",alt:""}})]),t._v(" "),n("p",[t._v("完整vue代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<script>\nexport default {\n  name: 'signature',\n  data () {\n    return {\n      cxt: {}  //用来存放canvas的dom\n    }\n  },\n  mounted () {\n  \t// 获取canvas的渲染上下文对象\n    this.cxt = this.$refs.canvas.getContext('2d')\n    // 设置颜色（黑色）\n    this.cxt.fillStyle = 'rgb(0,0,0)'\n    // 设置粗细（2px）\n    this.cxt.lineWidth = '2px'\n  },\n  methods: {\n  \t// 开始滑动事件\n    touch_start (event) {\n      this.cxt.beginPath()\n      // 获取到触摸位置的X Y轴\n      let touch = event.changedTouches[0]\n      this.cxt.moveTo(touch.clientX, touch.clientY)\n    },\n\n    touch_move (event) {\n      let touch = event.changedTouches[0]\n      this.cxt.lineTo(touch.clientX, touch.clientY)\n      // 使用lineTo后必须填充\n      this.cxt.stroke()\n    },\n    touch_end () {\n      // 关闭这条路径\n      this.cxt.closePath()\n    }\n  }\n}\n<\/script>\n")])])]),n("p",[t._v("接下来我们要把它转化为base64代码，并实现点击按钮上传。")]),t._v(" "),n("p",[t._v("在 html 中添加一个按钮，并加上点击事件")]),t._v(" "),n("p",[t._v("这时候就要用到 "),n("code",[t._v("canvas.toDataURL")]),t._v(" 这个api，因为签名生成的图片不是很大，所以使用base64格式存储或传输都比较方便。")]),t._v(" "),n("p",[t._v("不难写出下面的代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("toBase64 () {\n  let imgdata = this.cxt.toDataURL()\n  console.log(imgdata)\n}\n")])])]),n("p",[t._v("运行后"),n("img",{attrs:{src:"https://i.imgur.com/ujcOodQ.png",alt:""}})]),t._v(" "),n("p",[t._v("。。。又犯了个错误，调用 "),n("code",[t._v("toDataURL()")]),t._v(" 的并"),n("strong",[t._v("不是渲染上下文对象")]),t._v("，而是"),n("strong",[t._v("canvas")]),t._v("本身")]),t._v(" "),n("p",[t._v("正确代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("toBase64 () {\n  let imgdata = this.$refs.canvas.toDataURL()\n  console.log(imgdata)\n}\n")])])]),n("p",[n("img",{attrs:{src:"https://i.imgur.com/BOkw2SF.gif",alt:""}})]),t._v(" "),n("p",[t._v("上传图片只需要上传base64编码即可，预览也可以使用base64。")]),t._v(" "),n("p",[t._v("接下来是清除按钮，只需要将canvas清空即可")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("// 清空\nclearCanvas () {\n  this.cxt.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height)\n}\n")])])]),n("p",[n("img",{attrs:{src:"https://i.imgur.com/iAuPfqT.gif",alt:""}})]),t._v(" "),n("p",[t._v("这样这个签名插件就完成了。")]),t._v(" "),n("p",[t._v("附上完整代码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("<template>\n  <div>\n    <canvas\n      @touchstart='touch_start'\n      @touchend='touch_end'\n      @touchmove='touch_move'\n      ref='canvas'\n      width=\"300\"\n      height=\"400\"\n    ></canvas>\n    <button @click=\"toBase64\">保存</button>\n    <button @click=\"clearCanvas\">清空</button>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'signature',\n  data () {\n    return {\n      cxt: {} // 用来存放canvas的渲染上下文对象\n    }\n  },\n  mounted () {\n    // 获取canvas的渲染上下文对象\n    this.cxt = this.$refs.canvas.getContext('2d')\n    // 设置颜色（黑色）\n    this.cxt.fillStyle = 'rgb(0,0,0)'\n    // 设置粗细（2px）\n    this.cxt.lineWidth = '2px'\n  },\n  methods: {\n    // 开始滑动事件\n    touch_start (event) {\n      this.cxt.beginPath()\n      // 获取到触摸位置的X Y轴\n      let touch = event.changedTouches[0]\n      this.cxt.moveTo(touch.clientX, touch.clientY)\n    },\n    touch_move (event) {\n      let touch = event.changedTouches[0]\n      this.cxt.lineTo(touch.clientX, touch.clientY)\n      // 使用lineTo后必须填充\n      this.cxt.stroke()\n    },\n    touch_end () {\n      // 关闭这条路径\n      this.cxt.closePath()\n    },\n    // 转化base64\n    toBase64 () {\n      let imgdata = this.$refs.canvas.toDataURL()\n      console.log(imgdata)\n    },\n    // 清空\n    clearCanvas () {\n      this.cxt.clearRect(0, 0, this.$refs.canvas.width, this.$refs.canvas.height)\n    }\n  }\n}\n<\/script>\n\n<style scoped>\nbutton {\n  width: 100px;\n  height: 50px;\n}\n</style>\n\n")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);